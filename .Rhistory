eixt()
exit()
exit
quit
quit()
install.packages(gapminder)
install.packages("gapminder")
library(gapminder)
c = data(gapminder)
c
type(c)
data("gapminder")
data
summary(gapminder)
hist(lifeExp)
attach(gapminder)
hist(lifeExp)
boxplot(lifeExp ~ continent)
exit
q()
quit)=
q()
View(gapminder)
View(gapminder)
remove(gapminder)
remove(C)
Messwerte <- read.csv("~/Dokumente/Algorithm_Engeneering/UE_04/Messwerte.csv", header=FALSE, sep=";")
View(Messwerte)
data <- unlist(Messwerte)
typeof(data)
mean(data)
typeof(Messwerte)
median(data)
sort(data)
data <- sort(data)
data
sen(data)
sem(data)
sd(data)
length(data)
sd(data)/sqrt(length(data))
scatter(data)
boxplot(data)
Widerstandskurve <- read.csv2("~/Widerstandskurve.csv", header=FALSE, sep="")
View(Widerstandskurve)
myData <- read.csv2(Widerstandskurve)
myData <- read.csv2(Widerstandskurve.csv)
type(Widerstandskurve)
Widerstandskurve <- read.table("~/Widerstandskurve.txt", quote="\"", comment.char="")
View(Widerstandskurve)
data <- unlist(Widerstandskurve)
plot(data)
plot(data, mode='lines')
library(ploty)
library(plotly)
library(plot1y)
fit <- lm(y ~ poly(x, 3))
fit <- lm(y ~ poly(data, 3))
y = 1..60
y = range(60)
y = seq(from= 1, to=60, by=1)
fit <- lm(y ~ poly(data, 3))
plot(x, y)
plot(data, y)
plot(data)
plot(data, y)
plot(data)
plot(data, y)
y = data
x = seq(from= 1, to=60, by=1)
plot(x, y)
plot(data)
plot(x, y)
x0 <- seq(min(x), max(x), length = 20)  ## prediction grid
y0 <- predict.lm(fit, newdata = list(x = x0))  ## predicted values
lines(x0, y0, col = 2)  ## add regression curve (colour: red)
lines(x,y, type=l)
lines(x,y)
legend(xrange[1], yrange[2], 1:ntrees, cex=0.8, col=colors,
pch=plotchar, lty=linetype, title="Tree")
lines(x,y)
# add a title and subtitle
title("Tree Growth", "example of line plot")
# add a title and subtitle
title("Widerstandswert je °C", "example of line plot")
# add a title and subtitle
title("XXXXXXXXXXXXXXXX", "example of line plot")
# add a title and subtitle
title("OOOOOOOOOOOOOOOO", "example of line plot")
# add a title and subtitle
title("--------------", "example of line plot")
x = seq(from= 1, to=60, by=1)
lines(x,y)
plot(data)
clear
rm(list=ls())
cat("\014")
x <- seq(from=0, to=600, by=10)
y <- 0
0,02
0,07
0,220000000000001
0,49
0,84
1,21
1,6
2,04
2,44
2,77
3,19
3,55
3,9
4,29
4,49
4,77
5
5,25
5,48
5,68
5,89
6,08
6,24
6,41
6,56
6,71
6,84
6,97
7,09
7,2
7,31
7,42
7,52
7,61
7,7
7,78
7,92
7,99
8,12
8,18
8,22
8,28
8,33
8,38
8,43
8,47
8,51
8,55
8,6
8,64
8,68
8,71
8,74
8,78
8,81
8,84
8,86
8,89
8,91
y <- 0
0,02
0,07
0,220000000000001
0,49
0,84
1,21
1,6
2,04
2,44
2,77
3,19
3,55
3,9
4,29
4,49
4,77
5
5,25
5,48
5,68
5,89
6,08
6,24
6,41
6,56
6,71
6,84
6,97
7,09
7,2
7,31
7,42
7,52
7,61
7,7
7,78
7,92
7,99
8,12
8,18
8,22
8,28
8,33
8,38
8,43
8,47
8,51
8,55
8,6
8,64
8,68
8,71
8,74
8,78
8,81
8,84
8,86
8,89
8,91
widerstandswerte <- read.table("~/Dokumente/Mikrocontroller_Anwendungen/widerstandswerte.txt", quote="\"", comment.char="")
View(widerstandswerte)
y <- unlist(widerstandswerte)
x <- seq(from=10, to=600, by=10)
plot(x,y)
plot(x,y1, type = "n")
plot(x,y, type = "n")
plot(x,y, type = "p")
plot(x,y, type = "n")
lines(x,y)
title("Sprungantwort Heizvorgang")
history
xlab"Zeit in Sekunden"
plot(xlab"Zeit in Sekunden")
a = plot(x,y )
a = plot(x,y type="n")
a = plot(x,y, type="n")
a.xlab="hallo"
plot(x,y, type = "n")
lines(x,y)
x <- c(1, 3, 5, 6)
x
x
x
x*x
exit
exit()
quit
q()
neue.daten <- data.frame()
fix(neue.daten)
neue.daten
quit()
quit()
??e1071
#1. load Packages
library(caret) # Classification And REgression Training-package
library(e1071) # Support Vector Machines The Interface to libsvm in package e1071
#2. Read the data:
bn <- read.csv("banknote-authentication.csv")
#3. Convert the outcome variable class to a factor:
bn$class <- factor(bn$class)
#4. Partition the data:
set.seed(1000)
t.idx <- createDataPartition(bn$class, p=0.7, list=FALSE)
#5. Build the model:
mod <- svm(class ~ ., data = bn[t.idx,])
#6. Check model performance on training data by generating an
# error/classification-confusion matrix:
table(bn[t.idx,"class"], fitted(mod), dnn = c("Actual", "Predicted"))
#1. load Packages
library(caret) # Classification And REgression Training-package
library(e1071) # Support Vector Machines The Interface to libsvm in package e1071
#2. Read the data:
bn <- read.csv("banknote-authentication.csv")
setwd(dir = "Dokumente/4._Semester/Oberseminar_Data_Mining/")
#1. load Packages
library(caret) # Classification And REgression Training-package
library(e1071) # Support Vector Machines The Interface to libsvm in package e1071
#2. Read the data:
bn <- read.csv("banknote-authentication.csv")
#3. Convert the outcome variable class to a factor:
bn$class <- factor(bn$class)
#4. Partition the data:
set.seed(1000)
t.idx <- createDataPartition(bn$class, p=0.7, list=FALSE)
#5. Build the model:
mod <- svm(class ~ ., data = bn[t.idx,])
#6. Check model performance on training data by generating an
# error/classification-confusion matrix:
table(bn[t.idx,"class"], fitted(mod), dnn = c("Actual", "Predicted"))
??naiveBayes
??naiveBayes doc
??naiveBayesdoc
x <- 1:1000
x
x <- seq()
?seq
x <- seq(from = -6, to = 6, by = 0.01)
x
y <- 1/(1 + exp(-x))
plot(x,y)
plot(x,y, type = line)
?plot
?plot()
plot(x,y, type = l)
?plot()
plot(x,y, l)
plot(x,y, type = l)
plot(x,y, type = line)
?plot()
plot(x,y, type = "l")
plot(seq(from = -6, to = 6, by = 0.01),1/(1 + exp(-seq(from = -6, to = 6, by = 0.01))), type = "l")
plot(seq(from = -6, to = 6, by = 0.1),1/(1 + exp(-seq(from = -6, to = 6, by = 0.1))), type = "l")
plot(seq(from = -6, to = 6, by = 0.5),1/(1 + exp(-seq(from = -6, to = 6, by = 0.5))), type = "l")
plot(seq(from = -6, to = 6, by = 1),1/(1 + exp(-seq(from = -6, to = 6, by = 1))), type = "l")
plot(seq(from = -6, to = 6, by = 2),1/(1 + exp(-seq(from = -6, to = 6, by = 2))), type = "l")
plot(seq(from = -6, to = 6, by = 1/2),1/(1 + exp(-seq(from = -6, to = 6, by = 1/2))), type = "l")
setwd(dir = "Dokumente/4._Semester/Oberseminar_Data_Mining/")
cp <- read.csv("college-perf.csv")
cp$Perf <- ordered(cp$Perf, levels = c("Low", "Medium", "High"))
cp$Pred <- ordered(cp$Pred, levels = c("Low", "Medium", "High"))
#1. First create and display a two-way table based on the actual and predicted values:
tab <- table(cp$Perf, cp$Pred, dnn = c("Actual", "Predicted"))
tab
?table
library(xtable)
library("xtable")
xtabs()
xtabs(tab)
library("xtable")
edit("cp")
edit(cp)
fix(cp)
i
i
i
i
setwd(d
r = "Dokumente/4._Semester/Oberseminar_Data_Mining/")
setwd(d      r = "Dokumente/4._Semester/Oberseminar_Data_Mining/")
cp <- read.csv("college-perf.csv")
cp$Perf <- ordered(cp$Perf, levels = c("Low", "Medium", "High"))
setwd(dr = "Dokumente/4._Semester/Oberseminar_Data_Mining/")
cp <- read.csv("college-perf.csv")
cp$Perf <- ordered(cp$Perf, levels = c("Low", "Medium", "High"))
cp$Pred <- ordered(cp$Pred, levels = c("Low", "Medium", "High"))
#1. First create and display a two-way table based on the actual and predicted values:
tab <- table(cp$Perf, cp$Pred, dnn = c("Actual", "Predicted"))
tab
#2. Display the raw numbers as proportions or percentages. To get overall table-level proportions use:
prop.table(tab)
#3. Darstellung in Prozenten
prob.table(tab, 1)
#3. Darstellung in Prozenten
prop.table(tab, 1)
round(prop.table(tab),1)
round(prop.table(tab)*100,1)
#3.1 Darstellung zeilenweise in Prozenten
round(prop.table(tab, 1), 1)
#3.1 Darstellung zeilenweise in Prozenten
round(prop.table(tab, 1)*100, 1)
structure(cp)
class(cp)
summary(cp)
str(cp)
summary(cp)
tab
?table
?prob.table
?prop.table
View(cp)
?ordered
#1. Auftrittshäufigkeiten:
tab <- table(cp$Perf, cp$Pred, dnn = c("Actual", "Predicted"))
tab
#2. relative Häufigkeiten:
prop.table(tab)
#2.1 prozentual:
round(prop.table(tab)*100,1)
#3. Darstellung der Wahrscheinlichkeiten zeilenweise
prop.table(tab, 1)
#3.1 Darstellung zeilenweise in Prozenten
round(prop.table(tab, 1)*100, 1)
#4.1 Visualisierung als Barplot
barplot(tab, legend = TRUE)
#4.2 Visualisierung als Mosaikplot
mosaicplot(tab, main="Prediction performance")
#4.2 Visualisierung als Mosaikplot
mosaicplot(tab, main="Prediction performance", color = "rainbow")
#4.2 Visualisierung als Mosaikplot
mosaicplot(tab, main="Prediction performance", color = rainbow(3))
